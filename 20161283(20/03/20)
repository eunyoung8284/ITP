{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOM9aMkAdiZuyfOzBAojopA",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/eunyoung8284/ITP/blob/submit/20161283(20/03/20)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sTuQLpPYQvR1",
        "colab_type": "code",
        "outputId": "b4a10337-60a0-4cb5-f277-30b2bf040026",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "print('Hello World')\n",
        "\n",
        "# Today's mission : touch \"colab\"\n",
        "# Create github account"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Hello World\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PwNiu2xMSO62",
        "colab_type": "code",
        "outputId": "c24644c2-71e0-49c8-82c8-05bf2198a4d1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "# list and dictionary is important...\n",
        "list1 = [1, 3, 4, 5, 6, 7]\n",
        "# initializing point...\n",
        "sum = 0\n",
        "# loop statement \n",
        "for i in list1:\n",
        "  sum += i\n",
        "\n",
        "print(sum)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "26\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W1EHhq5JT1gV",
        "colab_type": "code",
        "outputId": "4df585b9-6850-4689-a9b0-508328536a38",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "# example : using list with indexing.. \n",
        "list1 = [1,2,3,4,5,6,7]\n",
        "list2 = [2,4,6,7]\n",
        "list1[-1:] = list2 # need understanding of negative indexing in phython\n",
        "print(list1)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1, 2, 3, 4, 5, 6, 2, 4, 6, 7]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A4NDTdvCU91D",
        "colab_type": "code",
        "outputId": "725bba76-9460-46e9-ddd5-fc949ab2b156",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 107
        }
      },
      "source": [
        "for i in range(0,5): # last number is excluded..\n",
        "  for y in range(0, i+1):\n",
        "     print(\"*\", end=\"\")\n",
        "  print()\n"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "*\n",
            "**\n",
            "***\n",
            "****\n",
            "*****\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_LChRkZRVvnB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8rIG-jIWV9ZO",
        "colab_type": "code",
        "outputId": "e12b2796-5ad6-413f-b91b-6413bbaacba5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "# Fibonacci series between 0 to 100\n",
        "# 0, 1, 1,2,3,5,8,13,21...\n",
        "x, y = 0,1\n",
        "while y < 101:\n",
        "  print(y, end=\" \")\n",
        "  x, y = y, x+y"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1 1 2 3 5 8 13 21 34 55 89 "
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fy0ha4tYWjXG",
        "colab_type": "code",
        "outputId": "3d8abd15-98c9-4a8f-863d-9fdf57c7d8b7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        }
      },
      "source": [
        "# condition statement\n",
        "# find factorial of a number\n",
        "factorial = 1\n",
        "num = int(input(\"Enter a number: \"))\n",
        "# check if the number is negative , positive of zero\n",
        "# num < 0 : display negative number\n",
        "# num == 0 : display \"factorial of 0 is 1\"\n",
        "# others : is factorial\n",
        "if num <0:\n",
        "  print(\"sorry...\")\n",
        "elif num == 0:\n",
        "  print(\"factorial of 0 is 1\")\n",
        "else : \n",
        "  for i in range(1, num+1):\n",
        "    factorial = factorial * i\n",
        "print(factorial)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter a number: 50\n",
            "30414093201713378043612608166064768844377641568960512000000000000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-dY_hmurYChj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}